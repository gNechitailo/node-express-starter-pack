#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('MyApp:server');
const http = require('http');
const config = require('../src/config');
const initAppContext = require('../src/app-context-root');
const makeApp = require('../src/app');

initAppContext()
  .then((container) => {
    const rootRouter = container.resolve('rootRouter');

    const app = makeApp({ rootRouter });

    app.set('port', config.port);

    // When in development, run cron jobs in the same process
    if (process.env.NODE_ENV === 'development' && !config.isPM2) {
      const periodicJobsRunner = container.resolve('periodicJobsRunner');
      periodicJobsRunner.run();
    }

    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);

    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      const bind = typeof config.port === 'string'
        ? `Pipe ${config.port}`
        : `Port ${config.port}`;

      // Handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          throw new Error(`${bind} requires elevated privileges`);
        case 'EADDRINUSE':
          throw new Error(`${bind} is already in use`);
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      const addr = server.address();

      const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;

      debug(`Listening on ${bind}`);
    }

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(config.port);
    server.on('error', onError);
    server.on('listening', onListening);
  });


