#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../src/app');
const debug = require('debug')('MyApp:server');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = function normalizePort(val) {
  const port = parseInt(val);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');


app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

const onError = function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`${bind} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = function onListening() {
  const addr = server.address();

  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;


  debug(`Listening on ${bind}`);
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
